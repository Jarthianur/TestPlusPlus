matrix(parallel):
  - name: C++11
    env: 
      CPP_STD: c++11
    tags: 
      - c++11
  - name: C++14
    env: 
      CPP_STD: c++14
    tags: 
      - c++14
  - name: C++17
    env: 
      CPP_STD: c++17
    tags: 
      - c++17

pipeline:
  - stage(Testing):
    - tasks(ordered):
      - docker(container):
          image: debian:sid-slim
          mount: true
          script: |
            case $1 in
              INIT)
                export LC_ALL=C
                export BUILD_DIR=${BUILD_DIR:-/build}
                apt-get update
                apt-get -y install git g++ g++-multilib tar wget make perl lcov cppcheck clang-format-6.0
                mkdir -p $BUILD_DIR
                pushd /mnt/host/
                tar cvzf $BUILD_DIR/testing.tar.gz $(git ls-files)
                popd
                pushd $BUILD_DIR
                tar xzf testing.tar.gz
                rm -rf testing.tar.gz
                cp -r test test_p
                mkdir -p reports/{{ env.CPP_STD }}
                popd
                $0 RUN
              ;;
              RUN)
                pushd $BUILD_DIR
                echo "BUILD SEQUENTIAL TEST BINARIES"
                pushd test
                g++ -o test_seq -g3 -O0 -fprofile-arcs -ftest-coverage -coverage -std={{ env.CPP_STD }} main.cpp basic_tests.cpp reflexive_tests.cpp
                lcov -c -i -d . -o base.info
                echo "RUN SEQUENTIAL TESTS"
                ./test_seq
                if [ $? -ne 0 ]; then exit 1; fi
                lcov -c -d . -o test.info
                lcov -a base.info -a test.info -o seq.info
                popd
                pushd test_p/
                echo "BUILD PARALLEL TEST BINARIES"
                g++ -o test_par -fopenmp -g3 -O0 -fprofile-arcs -ftest-coverage -coverage -std={{ env.CPP_STD }} main.cpp basic_tests.cpp reflexive_tests.cpp
                lcov -c -i -d . -o base.info
                echo "RUN PARALLEL TESTS"
                ./test_par
                if [ $? -ne 0 ]; then exit 1; fi
                lcov -c -d . -o test.info
                lcov -a base.info -a test.info -o par.info
                popd
                lcov -a test/seq.info -a test_p/par.info -o all.info
                lcov -e all.info "$PWD/src/*" -o reports/{{ env.CPP_STD }}/lcov.info
                popd
                cp -r $BUILD_DIR/reports/{{ env.CPP_STD }} /mnt/host/reports/
                chown -R ${UID}:${GID} /mnt/host/reports
              ;;
            esac
